{"ast":null,"code":"var _jsxFileName = \"/Users/shivamsharma/Downloads/google-calendar-clone-master/src/context/GlobalContext.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GlobalContext = /*#__PURE__*/React.createContext({\n  monthIndex: 0,\n  setMonthIndex: index => {},\n  smallCalendarMonth: 0,\n  setSmallCalendarMonth: index => {},\n  daySelected: null,\n  setDaySelected: day => {},\n  showEventModal: false,\n  setShowEventModal: () => {},\n  dispatchCalEvent: ({\n    type,\n    payload\n  }) => {},\n  savedEvents: [],\n  selectedEvent: null,\n  setSelectedEvent: () => {},\n  setLabels: () => {},\n  labels: [],\n  updateLabel: () => {},\n  updateLabelOrder: () => {},\n  // Add updateLabelOrder to context\n  filteredEvents: []\n});\nexport const GlobalProvider = ({\n  children\n}) => {\n  _s();\n  const [monthIndex, setMonthIndex] = useState(0);\n  const [smallCalendarMonth, setSmallCalendarMonth] = useState(0);\n  const [daySelected, setDaySelected] = useState(null);\n  const [showEventModal, setShowEventModal] = useState(false);\n  const [savedEvents, setSavedEvents] = useState([]);\n  const [selectedEvent, setSelectedEvent] = useState(null);\n  const [labels, setLabels] = useState([{\n    label: 'indigo',\n    checked: true\n  }, {\n    label: 'gray',\n    checked: false\n  }, {\n    label: 'green',\n    checked: false\n  }, {\n    label: 'blue',\n    checked: false\n  }, {\n    label: 'red',\n    checked: false\n  }, {\n    label: 'purple',\n    checked: true\n  }]);\n  const [filteredEvents, setFilteredEvents] = useState([]);\n  const updateLabel = ({\n    label,\n    checked\n  }) => {\n    setLabels(labels.map(lbl => lbl.label === label ? {\n      ...lbl,\n      checked\n    } : lbl));\n  };\n  const updateLabelOrder = updatedLabels => {\n    setLabels(updatedLabels);\n  };\n  const dispatchCalEvent = ({\n    type,\n    payload\n  }) => {\n    switch (type) {\n      case \"push\":\n        setSavedEvents([...savedEvents, payload]);\n        break;\n      case \"update\":\n        setSavedEvents(savedEvents.map(evt => evt.id === payload.id ? payload : evt));\n        break;\n      case \"delete\":\n        setSavedEvents(savedEvents.filter(evt => evt.id !== payload.id));\n        break;\n      default:\n        break;\n    }\n  };\n  useEffect(() => {\n    setFilteredEvents(savedEvents.filter(evt => labels.filter(lbl => lbl.checked).map(lbl => lbl.label).includes(evt.label)));\n  }, [savedEvents, labels]);\n  return /*#__PURE__*/_jsxDEV(GlobalContext.Provider, {\n    value: {\n      monthIndex,\n      setMonthIndex,\n      smallCalendarMonth,\n      setSmallCalendarMonth,\n      daySelected,\n      setDaySelected,\n      showEventModal,\n      setShowEventModal,\n      dispatchCalEvent,\n      savedEvents,\n      selectedEvent,\n      setSelectedEvent,\n      labels,\n      updateLabel,\n      updateLabelOrder,\n      filteredEvents\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n_s(GlobalProvider, \"VaiIiDylFdNh6X44OD6Y9dkh4wc=\");\n_c = GlobalProvider;\nexport default GlobalContext;\nvar _c;\n$RefreshReg$(_c, \"GlobalProvider\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","GlobalContext","createContext","monthIndex","setMonthIndex","index","smallCalendarMonth","setSmallCalendarMonth","daySelected","setDaySelected","day","showEventModal","setShowEventModal","dispatchCalEvent","type","payload","savedEvents","selectedEvent","setSelectedEvent","setLabels","labels","updateLabel","updateLabelOrder","filteredEvents","GlobalProvider","children","_s","setSavedEvents","label","checked","setFilteredEvents","map","lbl","updatedLabels","evt","id","filter","includes","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/shivamsharma/Downloads/google-calendar-clone-master/src/context/GlobalContext.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nconst GlobalContext = React.createContext({\n  monthIndex: 0,\n  setMonthIndex: (index) => {},\n  smallCalendarMonth: 0,\n  setSmallCalendarMonth: (index) => {},\n  daySelected: null,\n  setDaySelected: (day) => {},\n  showEventModal: false,\n  setShowEventModal: () => {},\n  dispatchCalEvent: ({ type, payload }) => {},\n  savedEvents: [],\n  selectedEvent: null,\n  setSelectedEvent: () => {},\n  setLabels: () => {},\n  labels: [],\n  updateLabel: () => {},\n  updateLabelOrder: () => {}, // Add updateLabelOrder to context\n  filteredEvents: [],\n});\n\nexport const GlobalProvider = ({ children }) => {\n  const [monthIndex, setMonthIndex] = useState(0);\n  const [smallCalendarMonth, setSmallCalendarMonth] = useState(0);\n  const [daySelected, setDaySelected] = useState(null);\n  const [showEventModal, setShowEventModal] = useState(false);\n  const [savedEvents, setSavedEvents] = useState([]);\n  const [selectedEvent, setSelectedEvent] = useState(null);\n  const [labels, setLabels] = useState([\n    { label: 'indigo', checked: true },\n    { label: 'gray', checked: false },\n    { label: 'green', checked: false },\n    { label: 'blue', checked: false },\n    { label: 'red', checked: false },\n    { label: 'purple', checked: true },\n  ]);\n  const [filteredEvents, setFilteredEvents] = useState([]);\n\n  const updateLabel = ({ label, checked }) => {\n    setLabels(labels.map(lbl => (lbl.label === label ? { ...lbl, checked } : lbl)));\n  };\n\n  const updateLabelOrder = (updatedLabels) => {\n    setLabels(updatedLabels);\n  };\n\n  const dispatchCalEvent = ({ type, payload }) => {\n    switch (type) {\n      case \"push\":\n        setSavedEvents([...savedEvents, payload]);\n        break;\n      case \"update\":\n        setSavedEvents(savedEvents.map(evt => evt.id === payload.id ? payload : evt));\n        break;\n      case \"delete\":\n        setSavedEvents(savedEvents.filter(evt => evt.id !== payload.id));\n        break;\n      default:\n        break;\n    }\n  };\n\n  useEffect(() => {\n    setFilteredEvents(savedEvents.filter(evt =>\n      labels\n        .filter(lbl => lbl.checked)\n        .map(lbl => lbl.label)\n        .includes(evt.label)\n    ));\n  }, [savedEvents, labels]);\n\n  return (\n    <GlobalContext.Provider value={{\n      monthIndex,\n      setMonthIndex,\n      smallCalendarMonth,\n      setSmallCalendarMonth,\n      daySelected,\n      setDaySelected,\n      showEventModal,\n      setShowEventModal,\n      dispatchCalEvent,\n      savedEvents,\n      selectedEvent,\n      setSelectedEvent,\n      labels,\n      updateLabel,\n      updateLabelOrder,\n      filteredEvents,\n    }}>\n      {children}\n    </GlobalContext.Provider>\n  );\n};\n\nexport default GlobalContext;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}