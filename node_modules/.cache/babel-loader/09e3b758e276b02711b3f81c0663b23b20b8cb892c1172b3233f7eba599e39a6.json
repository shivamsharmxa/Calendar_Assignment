{"ast":null,"code":"var _jsxFileName = \"/Users/shivamsharma/Desktop/CalendarAssignment/src/context/ContextWrapper.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useReducer, useMemo } from \"react\";\nimport GlobalContext from \"./GlobalContext\";\nimport dayjs from \"dayjs\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction savedEventsReducer(state, {\n  type,\n  payload\n}) {\n  switch (type) {\n    case \"push\":\n      return [...state, payload];\n    case \"update\":\n      return state.map(evt => evt.id === payload.id ? payload : evt);\n    case \"delete\":\n      return state.filter(evt => evt.id !== payload.id);\n    default:\n      throw new Error();\n  }\n}\nfunction initEvents() {\n  const storageEvents = localStorage.getItem(\"savedEvents\");\n  const parsedEvents = storageEvents ? JSON.parse(storageEvents) : [];\n  return parsedEvents;\n}\nexport default function ContextWrapper(props) {\n  _s();\n  const [monthIndex, setMonthIndex] = useState(dayjs().month());\n  const [smallCalendarMonth, setSmallCalendarMonth] = useState(null);\n  const [daySelected, setDaySelected] = useState(dayjs());\n  const [showEventModal, setShowEventModal] = useState(false);\n  const [selectedEvent, setSelectedEvent] = useState(null);\n  const [labels, setLabels] = useState([]);\n  const [savedEvents, dispatchCalEvent] = useReducer(savedEventsReducer, [], initEvents);\n  const filteredEvents = useMemo(() => {\n    return savedEvents.filter(evt => labels.filter(lbl => lbl.checked).map(lbl => lbl.label).includes(evt.label));\n  }, [savedEvents, labels]);\n  useEffect(() => {\n    localStorage.setItem(\"savedEvents\", JSON.stringify(savedEvents));\n  }, [savedEvents]);\n  useEffect(() => {\n    setLabels(prevLabels => {\n      return [...new Set(savedEvents.map(evt => evt.label))].map(label => {\n        const currentLabel = prevLabels.find(lbl => lbl.label === label);\n        return {\n          label,\n          checked: currentLabel ? currentLabel.checked : true\n        };\n      });\n    });\n  }, [savedEvents]);\n  useEffect(() => {\n    if (smallCalendarMonth !== null) {\n      setMonthIndex(smallCalendarMonth);\n    }\n  }, [smallCalendarMonth]);\n  useEffect(() => {\n    if (!showEventModal) {\n      setSelectedEvent(null);\n    }\n  }, [showEventModal]);\n  function updateLabel(label) {\n    setLabels(labels.map(lbl => lbl.label === label.label ? label : lbl));\n  }\n  return /*#__PURE__*/_jsxDEV(GlobalContext.Provider, {\n    value: {\n      monthIndex,\n      setMonthIndex,\n      smallCalendarMonth,\n      setSmallCalendarMonth,\n      daySelected,\n      setDaySelected,\n      showEventModal,\n      setShowEventModal,\n      dispatchCalEvent,\n      selectedEvent,\n      setSelectedEvent,\n      savedEvents,\n      setLabels,\n      labels,\n      updateLabel,\n      filteredEvents\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n_s(ContextWrapper, \"e3mUwRAUT323N5XN46Kbdi3PAi8=\");\n_c = ContextWrapper;\nvar _c;\n$RefreshReg$(_c, \"ContextWrapper\");","map":{"version":3,"names":["React","useState","useEffect","useReducer","useMemo","GlobalContext","dayjs","jsxDEV","_jsxDEV","savedEventsReducer","state","type","payload","map","evt","id","filter","Error","initEvents","storageEvents","localStorage","getItem","parsedEvents","JSON","parse","ContextWrapper","props","_s","monthIndex","setMonthIndex","month","smallCalendarMonth","setSmallCalendarMonth","daySelected","setDaySelected","showEventModal","setShowEventModal","selectedEvent","setSelectedEvent","labels","setLabels","savedEvents","dispatchCalEvent","filteredEvents","lbl","checked","label","includes","setItem","stringify","prevLabels","Set","currentLabel","find","updateLabel","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/shivamsharma/Desktop/CalendarAssignment/src/context/ContextWrapper.js"],"sourcesContent":["import React, {\n  useState,\n  useEffect,\n  useReducer,\n  useMemo,\n} from \"react\";\nimport GlobalContext from \"./GlobalContext\";\nimport dayjs from \"dayjs\";\n\nfunction savedEventsReducer(state, { type, payload }) {\n  switch (type) {\n    case \"push\":\n      return [...state, payload];\n    case \"update\":\n      return state.map((evt) =>\n        evt.id === payload.id ? payload : evt\n      );\n    case \"delete\":\n      return state.filter((evt) => evt.id !== payload.id);\n    default:\n      throw new Error();\n  }\n}\nfunction initEvents() {\n  const storageEvents = localStorage.getItem(\"savedEvents\");\n  const parsedEvents = storageEvents ? JSON.parse(storageEvents) : [];\n  return parsedEvents;\n}\n\nexport default function ContextWrapper(props) {\n  const [monthIndex, setMonthIndex] = useState(dayjs().month());\n  const [smallCalendarMonth, setSmallCalendarMonth] = useState(null);\n  const [daySelected, setDaySelected] = useState(dayjs());\n  const [showEventModal, setShowEventModal] = useState(false);\n  const [selectedEvent, setSelectedEvent] = useState(null);\n  const [labels, setLabels] = useState([]);\n  const [savedEvents, dispatchCalEvent] = useReducer(\n    savedEventsReducer,\n    [],\n    initEvents\n  );\n\n  const filteredEvents = useMemo(() => {\n    return savedEvents.filter((evt) =>\n      labels\n        .filter((lbl) => lbl.checked)\n        .map((lbl) => lbl.label)\n        .includes(evt.label)\n    );\n  }, [savedEvents, labels]);\n\n  useEffect(() => {\n    localStorage.setItem(\"savedEvents\", JSON.stringify(savedEvents));\n  }, [savedEvents]);\n\n  useEffect(() => {\n    setLabels((prevLabels) => {\n      return [...new Set(savedEvents.map((evt) => evt.label))].map(\n        (label) => {\n          const currentLabel = prevLabels.find(\n            (lbl) => lbl.label === label\n          );\n          return {\n            label,\n            checked: currentLabel ? currentLabel.checked : true,\n          };\n        }\n      );\n    });\n  }, [savedEvents]);\n\n  useEffect(() => {\n    if (smallCalendarMonth !== null) {\n      setMonthIndex(smallCalendarMonth);\n    }\n  }, [smallCalendarMonth]);\n\n  useEffect(() => {\n    if (!showEventModal) {\n      setSelectedEvent(null);\n    }\n  }, [showEventModal]);\n\n  function updateLabel(label) {\n    setLabels(\n      labels.map((lbl) => (lbl.label === label.label ? label : lbl))\n    );\n  }\n\n  return (\n    <GlobalContext.Provider\n      value={{\n        monthIndex,\n        setMonthIndex,\n        smallCalendarMonth,\n        setSmallCalendarMonth,\n        daySelected,\n        setDaySelected,\n        showEventModal,\n        setShowEventModal,\n        dispatchCalEvent,\n        selectedEvent,\n        setSelectedEvent,\n        savedEvents,\n        setLabels,\n        labels,\n        updateLabel,\n        filteredEvents,\n      }}\n    >\n      {props.children}\n    </GlobalContext.Provider>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}